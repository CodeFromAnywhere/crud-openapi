{
    "x-actionschema": "0.0.1",
    "$schema": "https://raw.githubusercontent.com/CodeFromAnywhere/ActionSchema/main/schemas/openapi.schema.json",
    "openapi": "3.0.0",
    "info": {
        "title": "OpenAPI CRUD",
        "version": "1.0",
        "description": ""
    },
    "servers": [{ "url": "https://data.actionschema.com" }],
    "paths": {
        "/listDatabases": {
            "get": {
                "summary": "List your databases",
                "operationId": "listDatabases",
                "responses": {
                    "200": {
                        "description": "My DB List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "isSuccessful": { "type": "boolean" },
                                        "message": { "type": "string" },
                                        "status": { "type": "number" },
                                        "databases": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "required": [
                                                    "databaseSlug",
                                                    "authToken",
                                                    "schema",
                                                    "openapiUrl"
                                                ],
                                                "properties": {
                                                    "databaseSlug": { "type": "string" },
                                                    "openapiUrl": { "type": "string" },
                                                    "authToken": {
                                                        "type": "string",
                                                        "description": "Bearer Authorization token to be used for the openapi of this specific database. Can be used interchangeably to the admin authtoken."
                                                    },
                                                    "schema": { "type": "string" }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/createDatabase": {
            "post": {
                "summary": "",
                "operationId": "createDatabase",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "databaseSlug": {
                                        "title": "Database ID",
                                        "description": "Unique slug for the database to be used as prefix to the endpoints.",
                                        "$ref": "#/components/schemas/UrlSlug"
                                    },
                                    "schemaString": {
                                        "title": "Schema",
                                        "type": "string",
                                        "description": "JSON of the schema you want the database to refer to. Should be a Object JSON Schema."
                                    },
                                    "authToken": {
                                        "type": "string",
                                        "description": "Token required to authrorize using the CRUD endpoints. Will be generated if not given.",
                                        "minLength": 32,
                                        "maxLength": 128
                                    },
                                    "region": {
                                        "description": "Can be set for a new database. Cannot be changed",
                                        "type": "string",
                                        "enum": [
                                            "eu-west-1",
                                            "us-east-1",
                                            "us-west-1",
                                            "ap-northeast-1",
                                            "us-central1"
                                        ]
                                    },
                                    "vectorIndexColumns": {
                                        "$ref": "#/components/schemas/VectorIndexColumns"
                                    },
                                    "openaiApiKey": {
                                        "type": "string",
                                        "description": "Needed if you use vectorIndexColumns"
                                    }
                                },
                                "required": ["schemaString", "databaseSlug"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Create database response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateDatabaseResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/openapi.json": {
            "get": {
                "summary": "Get openapi",
                "operationId": "getOpenapi",
                "responses": {
                    "200": {
                        "description": "OpenAPI",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "https://raw.githubusercontent.com/CodeFromAnywhere/ActionSchema/main/schemas/openapi.schema.json"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{databaseSlug}/openapi.json": {
            "get": {
                "summary": "Get openapi for this database table alone",
                "operationId": "getCrudOpenapi",
                "responses": {
                    "200": {
                        "description": "OpenAPI",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "https://raw.githubusercontent.com/CodeFromAnywhere/ActionSchema/main/schemas/openapi.schema.json"
                                        },
                                        {
                                            "type": "object",
                                            "required": ["isSuccessful"],
                                            "properties": {
                                                "isSuccessful": {
                                                    "type": "boolean"
                                                },
                                                "message": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "databaseSlug",
                    "schema": { "type": "string" },
                    "required": true
                }
            ]
        },
        "/{databaseSlug}/schema.json": {
            "get": {
                "summary": "Get schema for a database",
                "operationId": "getSchema",
                "responses": {
                    "200": {
                        "description": "Schema",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {},
                                    "additionalProperties": true
                                }
                            }
                        }
                    }
                }
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "databaseSlug",
                    "schema": { "type": "string" },
                    "required": true
                }
            ]
        },
        "/read": {
            "post": {
                "summary": "",
                "operationId": "read",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/ReadContext" }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OpenAPI",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/ReadResponse" }
                            }
                        }
                    }
                }
            }
        },
        "/create": {
            "post": {
                "summary": "",
                "operationId": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/CreateContext" }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OpenAPI",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/CreateResponse" }
                            }
                        }
                    }
                }
            }
        },
        "/remove": {
            "post": {
                "summary": "",
                "operationId": "remove",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/RemoveContext" }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OpenAPI",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/RemoveResponse" }
                            }
                        }
                    }
                }
            }
        },
        "/update": {
            "post": {
                "summary": "",
                "operationId": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/UpdateContext" }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OpenAPI",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/UpdateResponse" }
                            }
                        }
                    }
                }
            }
        }
    },
    "security": [{ "apiKey": [] }],
    "components": {
        "schemas": {
            "UrlSlug": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9._~-]+$",
                "minLength": 1,
                "maxLength": 64,
                "description": "Slug compatible with URLs"
            },
            "CreateResponse": {
                "type": "object",
                "properties": {
                    "isSuccessful": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": "string"
                    },
                    "result": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The rowIds created"
                    }
                },
                "required": ["isSuccessful", "message"]
            },
            "CreateContext": {
                "type": "object",
                "properties": {
                    "databaseSlug": { "type": "string" },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ModelItem",
                            "description": "If items in this array contain `__id`, it will be overwriting that item if it's already there."
                        }
                    }
                },
                "additionalProperties": false,
                "required": ["databaseSlug", "items"]
            },
            "Sort": {
                "type": "object",
                "properties": {
                    "sortDirection": {
                        "type": "string",
                        "enum": ["ascending", "descending"]
                    },
                    "objectParameterKey": {
                        "type": "string"
                    }
                },
                "required": ["sortDirection", "objectParameterKey"]
            },
            "Filter": {
                "type": "object",
                "properties": {
                    "operator": {
                        "type": "string",
                        "enum": [
                            "equal",
                            "notEqual",
                            "endsWith",
                            "startsWith",
                            "includes",
                            "includesLetters",
                            "greaterThan",
                            "lessThan",
                            "greaterThanOrEqual",
                            "lessThanOrEqual",
                            "isIncludedIn",
                            "isFalsy",
                            "isTruthy"
                        ]
                    },
                    "value": {
                        "type": "string"
                    },
                    "objectParameterKey": {
                        "type": "string"
                    }
                },
                "required": ["operator", "value", "objectParameterKey"]
            },
            "ReadResponse": {
                "type": "object",
                "properties": {
                    "isSuccessful": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": "string"
                    },
                    "$schema": {
                        "type": "string"
                    },
                    "items": {
                        "type": "object",
                        "additionalProperties": { "$ref": "#/components/schemas/ModelItem" }
                    },
                    "schema": {
                        "type": "object",
                        "additionalProperties": true
                    },
                    "canWrite": {
                        "type": "boolean"
                    },
                    "hasMore": {
                        "type": "boolean"
                    }
                },
                "required": ["isSuccessful", "message"]
            },
            "ReadContext": {
                "type": "object",
                "additionalProperties": false,
                "required": ["databaseSlug"],
                "properties": {
                    "databaseSlug": { "type": "string" },
                    "search": { "type": "string" },
                    "vectorSearch": {
                        "type": "object",
                        "properties": {
                            "propertyKey": { "type": "string" },
                            "input": { "type": "string" },
                            "topK": { "type": "number" },
                            "minimumSimilarity": { "type": "number" }
                        },
                        "required": ["propertyKey", "input", "topK", "minimumSimilarity"]
                    },
                    "rowIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "startFromIndex": {
                        "type": "integer"
                    },
                    "maxRows": {
                        "type": "integer"
                    },
                    "filter": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Filter"
                        }
                    },
                    "sort": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Sort"
                        }
                    },
                    "objectParameterKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ignoreObjectParameterKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "UpdateContext": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "databaseSlug": { "type": "string" },
                    "id": {
                        "type": "string",
                        "description": "The id (indexed key) of the item to update. Update that functions as upsert. If the id didn't exist, it will be created."
                    },
                    "partialItem": {
                        "$ref": "#/components/schemas/ModelItem",
                        "description": "New (partial) value of the item. Will update all keys provided here. Please note that it cannot be set to 'undefined' as this doesn't transfer over JSON, but if you set it to 'null', the value will be removed from the database."
                    }
                },
                "required": ["databaseSlug", "id", "partialItem"]
            },
            "UpdateResponse": {
                "type": "object",
                "properties": {
                    "isSuccessful": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": ["isSuccessful", "message"]
            },
            "ModelItem": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
            },
            "RemoveContext": {
                "type": "object",
                "properties": {
                    "databaseSlug": { "type": "string" },
                    "rowIds": {
                        "description": "Which IDs should be removed",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "additionalProperties": false,
                "required": ["databaseSlug", "rowIds"]
            },
            "RemoveResponse": {
                "type": "object",
                "properties": {
                    "isSuccessful": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": "string"
                    },
                    "deleteCount": {
                        "type": "integer",
                        "description": "The number of items deleted"
                    }
                },
                "required": ["isSuccessful", "message"]
            },
            "CreateDatabaseResponse": {
                "type": "object",
                "required": ["isSuccessful"],
                "properties": {
                    "isSuccessful": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": "string"
                    },
                    "authToken": { "type": "string" },
                    "adminAuthToken": { "type": "string" },
                    "databaseSlug": { "type": "string" },
                    "openapiUrl": { "type": "string" }
                }
            },
            "VectorIndexColumns": {
                "description": "A list of vector indexes to be created for several columns in your schema",
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "propertyKey": { "type": "string" },
                        "model": {
                            "type": "string",
                            "enum": [
                                "text-embedding-ada-002",
                                "text-embedding-3-small",
                                "text-embedding-3-large"
                            ]
                        },
                        "region": {
                            "type": "string",
                            "enum": ["us-east-1", "eu-west-1", "us-central1"]
                        },
                        "dimension_count": { "type": "number" },
                        "similarity_function": {
                            "type": "string",
                            "enum": ["COSINE", "EUCLIDIAN", "DOT_PRODUCT"]
                        }
                    },
                    "required": [
                        "propertyKey",
                        "model",
                        "region",
                        "dimension_count",
                        "similarity_function"
                    ]
                }
            },
            "StandardResponse": {
                "type": "object",
                "required": ["isSuccessful"],
                "properties": {
                    "status": { "type": "number" },
                    "isSuccessful": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": "string"
                    },
                    "priceCredit": {
                        "type": "number"
                    }
                }
            }
        },
        "securitySchemes": {
            "apiKey": {
                "type": "http",
                "bearerFormat": "Bearer",
                "scheme": "bearer",
                "description": "Admin Authtoken"
            }
        }
    }
}
