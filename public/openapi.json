{
  "x-actionschema": "0.0.1",
  "$schema": "https://raw.githubusercontent.com/CodeFromAnywhere/ActionSchema/main/schemas/openapi.schema.json",
  "openapi": "3.0.0",
  "info": {
    "title": "OpenAPI CRUD",
    "version": "1.0",
    "description": ""
  },
  "servers": [{ "url": "" }],
  "paths": {
    "/root/createDatabase": {
      "parameters": [
        {
          "in": "header",
          "required": false,
          "name": "X_UPSTASH_EMAIL",
          "schema": {
            "type": "string",
            "description": "If you want to use your own upstash account, fill in the details here."
          }
        },
        {
          "in": "header",
          "required": false,
          "name": "X_UPSTASH_API_KEY",
          "schema": {
            "type": "string",
            "description": "If you want to use your own upstash account, fill in the details here."
          }
        },
        {
          "in": "header",
          "required": false,
          "name": "X_ADMIN_AUTH_TOKEN",
          "schema": {
            "type": "string",
            "description": "Provide your admin authtoken if you have it. If you don't it will be generated for you."
          }
        }
      ],

      "post": {
        "summary": "",
        "operationId": "createDatabase",

        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "databaseSlug": {
                    "title": "Database ID",
                    "type": "string",
                    "description": "Unique slug for the database to be used as prefix to the endpoints."
                  },

                  "schemaString": {
                    "title": "Schema",
                    "type": "string",
                    "description": "JSON of the schema you want the database to refer to. Should be a Object JSON Schema."
                  },

                  "authToken": {
                    "type": "string",
                    "description": "Token required to authrorize using the CRUD endpoints. Will be generated if not given."
                  },
                  "region": {
                    "description": "Can be set for a new database. Cannot be changed",
                    "type": "string",
                    "enum": [
                      "eu-west-1",
                      "us-east-1",
                      "us-west-1",
                      "ap-northeast-1",
                      "us-central1"
                    ]
                  }
                },
                "required": ["schemaString", "databaseSlug"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create database response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatabaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/{databaseSlug}/updateDatabase": {
      "post": {
        "summary": "Update Database",
        "operationId": "updateDatabase",

        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schemaString": {
                    "type": "string",
                    "description": "JSON of the schema you want the database to refer to. Should be a Object JSON Schema."
                  },
                  "authToken": {
                    "type": "string",
                    "description": "Token required to authrorize using the CRUD endpoints."
                  }
                },
                "required": ["schemaString", "authToken"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update database response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "header",
          "required": true,
          "name": "X_ADMIN_AUTH_TOKEN",
          "schema": {
            "type": "string",
            "description": "Provide your admin authtoken for this database."
          }
        },
        {
          "in": "path",
          "name": "databaseSlug",
          "schema": { "type": "string" },
          "required": true
        }
      ]
    },

    "/{databaseSlug}/openapi.json": {
      "get": {
        "summary": "Get openapi for this database table alone",
        "operationId": "renderCrudOpenapi",

        "responses": {
          "200": {
            "description": "OpenAPI",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "https://raw.githubusercontent.com/CodeFromAnywhere/ActionSchema/main/schemas/openapi.schema.json"
                    },
                    { "type": "object", "additionalProperties": true }
                  ]
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "databaseSlug",
          "schema": { "type": "string" },
          "required": true
        }
      ]
    },
    "/{databaseSlug}/read": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseSlug",
          "schema": { "type": "string" },
          "required": true
        },
        {
          "in": "header",
          "name": "Authorization",
          "schema": { "type": "string" },
          "required": false,
          "description": "Bearer authorization"
        }
      ],
      "post": {
        "summary": "",
        "operationId": "read",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReadContext" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OpenAPI",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReadResponse" }
              }
            }
          }
        }
      }
    },
    "/{databaseSlug}/create": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseSlug",
          "schema": { "type": "string" },
          "required": true
        },
        {
          "in": "header",
          "name": "Authorization",
          "schema": { "type": "string" },
          "required": false,
          "description": "Bearer authorization"
        }
      ],
      "post": {
        "summary": "",
        "operationId": "create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateContext" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OpenAPI",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateResponse" }
              }
            }
          }
        }
      }
    },
    "/{databaseSlug}/remove": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseSlug",
          "schema": { "type": "string" },
          "description": "Upstash ID of the database",
          "required": true
        },
        {
          "in": "header",
          "name": "Authorization",
          "schema": { "type": "string" },
          "required": false,
          "description": "Bearer authorization"
        }
      ],
      "post": {
        "summary": "",
        "operationId": "remove",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RemoveContext" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OpenAPI",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RemoveResponse" }
              }
            }
          }
        }
      }
    },
    "/{databaseSlug}/update": {
      "parameters": [
        {
          "in": "path",
          "name": "databaseSlug",
          "schema": { "type": "string" },
          "required": true
        },
        {
          "in": "header",
          "name": "Authorization",
          "schema": { "type": "string" },
          "required": false,
          "description": "Bearer authorization"
        }
      ],
      "post": {
        "summary": "",
        "operationId": "update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateContext" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OpenAPI",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UpdateResponse" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateResponse": {
        "type": "object",
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The rowIds created"
          }
        },
        "required": ["isSuccessful", "message"]
      },
      "CreateContext": {
        "type": "object",
        "properties": {
          "databaseSlug": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "If items in this array contain `__id`, it will be overwriting that item if it's already there."
            }
          }
        },
        "required": ["databaseSlug", "items"]
      },
      "Sort": {
        "type": "object",
        "properties": {
          "sortDirection": {
            "type": "string",
            "enum": ["ascending", "descending"]
          },
          "objectParameterKey": {
            "type": "string"
          }
        },
        "required": ["sortDirection", "objectParameterKey"]
      },
      "Filter": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "enum": [
              "equal",
              "notEqual",
              "endsWith",
              "startsWith",
              "includes",
              "includesLetters",
              "greaterThan",
              "lessThan",
              "greaterThanOrEqual",
              "lessThanOrEqual",
              "isIncludedIn",
              "isFalsy",
              "isTruthy"
            ]
          },
          "value": {
            "type": "string"
          },
          "objectParameterKey": {
            "type": "string"
          }
        },
        "required": ["operator", "value", "objectParameterKey"]
      },
      "ReadResponse": {
        "type": "object",
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },

          "message": {
            "type": "string"
          },
          "$schema": {
            "type": "string"
          },
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "schema": {
            "type": "object",
            "additionalProperties": true
          },
          "canWrite": {
            "type": "boolean"
          },
          "hasMore": {
            "type": "boolean"
          }
        },
        "required": ["isSuccessful", "databaseSlug", "message"]
      },
      "ReadContext": {
        "type": "object",
        "properties": {
          "databaseSlug": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "rowIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startFromIndex": {
            "type": "integer"
          },
          "maxRows": {
            "type": "integer"
          },
          "filter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "objectParameterKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ignoreObjectParameterKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["databaseSlug"]
      },

      "UpdateContext": {
        "type": "object",
        "properties": {
          "databaseSlug": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The id (indexed key) of the item to update. Update that functions as upsert. If the id didn't exist, it will be created."
          },
          "partialItem": {
            "type": "object",
            "description": "New (partial) value of the item. Will update all keys provided here. Please note that it cannot be set to 'undefined' as this doesn't transfer over JSON, but if you set it to 'null', the value will be removed from the database."
          }
        },
        "required": ["databaseSlug", "id", "partialItem"]
      },
      "UpdateResponse": {
        "type": "object",
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["isSuccessful", "message"]
      },
      "RemoveContext": {
        "type": "object",
        "properties": {
          "rowIds": {
            "description": "Which IDs should be removed",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "databaseSlug": {
            "type": "string"
          }
        },
        "required": ["rowIds", "databaseSlug"]
      },
      "RemoveResponse": {
        "type": "object",
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "deleteCount": {
            "type": "integer",
            "description": "The number of items deleted"
          }
        },
        "required": ["isSuccessful", "message"]
      },

      "CreateDatabaseResponse": {
        "type": "object",
        "required": ["isSuccessful"],
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "authToken": { "type": "string" },
          "adminAuthToken": { "type": "string" }
        }
      },
      "StandardResponse": {
        "type": "object",
        "required": ["isSuccessful"],
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "priceCredit": {
            "type": "number"
          }
        }
      }
    }
  }
}
