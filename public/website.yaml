# This can be a way to describe websites in English, keys being filenames and values being description in English. Can be ran on every pre-commit to generate html.

index.html: make me a nice landing page in html + tailwind css CDN + js
  it should be a landing targeted towards devs
  first, look up README.md
  do it in a marketing copy way, and don't add all sections just like in the readme. Instead, please be more salelsy and follow principles of a good landingpage.
  Think step by step

admin.html: Make a new super cool website in HTML, Tailwind CSS CDN, and JS.

  Get authToken in localstorage, if it's not present, redirect to https://auth.actionschema.com/oauth/authorize?client_id=crud_website&redirect_uri=https://data.actionschema.com/admin.html

  If authToken is present, retreive /listProjects and render all projects with for each project the description and databaseSlugs.
  - Show loading indicator while this is loading.
  - Allow deletion of each project via /removeProject (delete icon button)
  - Allow deletion of each database via /removeDatabase (delete icon button)
  - Allow clicking a database, leading to /model.html?databaseSlug={slug}

  There should be a docs button linking to `reference.html`. Besides it, an text-input prefilled with the auth-token. copyable with a button.

  Use the OpenAPI as reference for your endpoints.

model.html:
  Uses ?databaseSlug=xxx and the authToken from localStorage, and calls `/read` and `/getSchema` when loading, showing the results in a table.


  Every property in the schema from `/getSchema` is a column in the table. Each row has a button linking to `update.html?databaseSlug={slug}&rowId={id}`.

  There should be a `New item` button that goes to `update.html?databaseSlug=[slug]` above the table.

  There should be a button 'Reference' linking to `/{databaseSlug}/reference.html`

update.html:
  Uses `?databaseSlug={slug}&rowId={id}` and the `authToken` and retreives the item using `/read`, showing the JSON value in a <textarea>.

  Submitting the JSON will call `/update` for that `rowId`. If there's no rowId given, generate a random `rowId` of 16 characters when submitting.

jsonschema.html:
  make a form in which you can build up a JSON Schema of type object.

  if you select object for a property, it should embed the form again, recursively to select properties for that object.

  show the Generated JSON in realtime.

  use basic html, css, and js with tailwind. use tailwind to show the form and the generated JSON side by side
