# This can be a way to describe websites in English, keys being filenames and values being description in English. Can be ran on every pre-commit to generate html.

index.html:
  Login, set the admin-token with prompt, stored at localstorage, then retrieves list via listDatabases, set that to localStorage too.

  Then from there, it links each database to model.html?databaseSlug={slug}

  There should be a button linking to `reference.html`

model.html:
  Uses ?databaseSlug=xxx and the authToken from localStorage, and calls `/read` and `/getSchema` when loading, showing the results in a table.


  Every property in the schema from `/getSchema` is a column in the table. Each row has a button linking to `update.html?databaseSlug={slug}&rowId={id}`.

  There should be a `New item` button that goes to `update.html?databaseSlug=[slug]` above the table.

  There should be a button 'Reference' linking to `/{databaseSlug}/reference.html`

update.html:
  Uses `?databaseSlug={slug}&rowId={id}` and the `authToken` and retreives the item using `/read`, showing the JSON value in a <textarea>.

  Submitting the JSON will call `/update` for that `rowId`. If there's no rowId given, generate a random `rowId` of 16 characters when submitting.

jsonschema.html:
  make a form in which you can build up a JSON Schema of type object.

  if you select object for a property, it should embed the form again, recursively to select properties for that object.

  show the Generated JSON in realtime.

  use basic html, css, and js with tailwind. use tailwind to show the form and the generated JSON side by side
