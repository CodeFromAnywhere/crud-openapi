# This can be a way to describe websites in English, keys being filenames and values being description in English. Can be ran on every pre-commit to generate html.

index.html: make me a nice landing page in html + tailwind css CDN + js
  it should be a landing targeted towards devs
  first, look up README.md
  do it in a marketing copy way, and don't add all sections just like in the readme. Instead, please be more salelsy and follow principles of a good landingpage.
  Think step by step

admin.html: Make a new super cool website in HTML, Tailwind CSS CDN, and JS.

  Get authToken in localstorage, if it's not present, redirect to https://auth.actionschema.com/oauth/authorize?client_id=crud_website&redirect_uri=https://data.actionschema.com/admin.html

  If authToken is present, retreive /listProjects and render all projects with for each project the description and databaseSlugs.
  - Show loading indicator while this is loading.
  - For each project link to /project/{projectSlug}/schema.json and /project/{projectSlug}/reference.html
  - Allow deletion of each project via /removeProject (delete icon button)
  - Allow deletion of each database via /removeDatabase (delete icon button)
  - Allow clicking a database, leading to /model.html?databaseSlug={slug}

  There should be a section on top with some buttons.
  - a docs button linking to `reference.html`.
  - Besides it, an text-input prefilled with the auth-token. copyable with a button.
  - a button linking to `jsonschema.html`
  - a button to create a new db, linking to new.html
  - button to AI [GPT](https://chatgpt.com/g/g-VmL8hNaEo-data-agent)

  Use the OpenAPI as reference for your endpoints.

new.html:
  Create an HTML page with Tailwind CSS CDN and JavaScript for creating a new database.

  1. Check for authToken in localStorage. If not present, redirect to the auth page.

  2. Display a form with the following fields
  - Project selection dropdown (populated from /listProjects)
  - Database name input
  - Database description textarea
  - JSON Schema editor (similar to jsonschema.html, but simplified)

  3. Include a "Create Database" submit button.
  4. On form submission
  - Validate inputs
  - Call the appropriate API endpoint (e.g., /createDatabase) with the form data
  - Show loading indicator during API call
  - Display success message or error feedback

  5. Add a "Back to Admin" button linking to admin.html

  6. Implement error handling and display user-friendly error messages

  7. Use Tailwind CSS for styling, ensuring a clean and professional look consistent with other pages

  8. Add client-side validation for form fields

  9. Include helpful tooltips or info icons next to form fields to guide users

  10. Optionally, add a preview section that shows a summary of the database configuration before submission

  Think step by step when implementing, ensuring good UX and following web development best practices

model.html:
  Uses ?databaseSlug=xxx and the authToken from localStorage, and calls `/read` and `/getSchema` when loading, showing the results in a table.

  Every property in the schema from `/getSchema` is a column in the table. Each row has a button linking to `update.html?databaseSlug={slug}&rowId={id}`.

  There should be a `New item` button that goes to `update.html?databaseSlug=[slug]` above the table.

  There should be a button 'Reference' linking to `/{databaseSlug}/reference.html`

update.html:
  Uses `?databaseSlug={slug}&rowId={id}` and the `authToken` and retreives the item using `/read`, showing the JSON value in a <textarea>.

  Submitting the JSON will call `/update` for that `rowId`. If there's no rowId given, generate a random `rowId` of 16 characters when submitting.

jsonschema.html:
  Make a form in which you can build up a JSON Schema of type object.
  - string number and boolean don't have extra behavior
  - if you select object for a property, it should embed the form again, recursively to select properties for that object.
  - if you select array for a property, it should allow to select type type of item and recursively continue like that.

  When clicking 'done', it copies an '\' escaped JSON string of the entire JSON Schema to your CLIPBOARD. ensure to copy/paste with escape characters (\) before every quote ("). also send an alert when clicked done

  IMPORTANT. use barebones HTML, CSS, and JS with tailwind CDN. use tailwind to show the form and the generated JSON side by side. Use good web design principles. Let's think step by step
